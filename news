API : application programming interface
allows software application to talk to each other



// const fs =require('fs')
// const tours= JSON.parse(fs.readFileSync(`${__dirname}/../dev-data/data/tours-simple.json`))
Rest architecture :  which stands for representational states transfer
    1- separate api into logical ressources
        ex: tours users ....
        https://www.aaa.com/User =   Endpoint
    2- expose structured ressrouces based url
    3- use http method   Get /tours/2 
    post creer ou envoyer data to server 
    put/patch : update
    delete Delete  => crud
    4-send with jason
    5 statless

module vs 
express.json is a middleware between the req and th res
middleware is a fn tha can modify the incoming data 
middleware : manipuler la requete 
 everything is a middleware even route
 req ---m1-(req,res)--m2---m3----m4----- finalres  middlewarestack 
Object.assign permet dobtenir un seul objet par merger 2 objet
201 created a new ressource in the server

to update data :
1-put : the app recivies the entire updated object
2 - patch :only the properties that should be updated 

mongo is typed

use aaaaaaaa : cree a data base and switch to it

db.tours.insetOne/insertMany({a:a,b:b}) : db:current database /tours : current collection /inserer document

db.tours.find()

show dbs  : shows all the databases
use db1 
use db2 

show collections
db.tours.find({name :"the fr hiker"})
db.tours.find({price :{$lte :500}})
db.tours.find({price :{$lte :500} , rating:{$gtr:4.8}})
db.tours.find($or : [{price :{$lte :500} , rating:{$gtr:4.8}}])

db.tours.updateOne({name : "the Snow"},{$set:{price :579}}) //only the first car update one

db.tours.deleteMany({rating : {$lt :50}})
db.deleteMany({}) // delete all

cluster is an instance of a data base


A slug uses the title of an article to generate a URL.


JWT : json web token
header + payload + signature 

header : metadata about the token
payload: data that we can encode into the token // but not encrypted 
signature : is created with the header + payload +secret 
jwt = signature+ header+payload

compare test signature & signature sent by the client
